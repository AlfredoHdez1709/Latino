#DEFINICIÓN

Este documento pretende explicar de manera general la definición del nuevo 
lenguaje de programación para latinos.

Comentarios:
---
Los comentarios estaran delimitados por comillas dobles ("), sólo será considerado
como comentario si la línea empieza con dicho cáracter,o es precedido con espacios o tabuladores.

"Este es un comentario de una linea"
"Este es 
un comentario
multilinea"
  "Este es un comentario con espacios al inicio de la linea"
  	"Este es un comentario tabulado"

Variables:
---
Las variables son identificadores asociados a valores. Se declaran indicando el 
tipo de dato que almacenará y su identificador.
El tipo de dato es opcional cuando se inicializa con un valor la variable.

identificador = valor
[tipo_dato] identificador
entero numero = 1

Un identificador puede:
* empezar por guión bajo (_)
* contener caracteres en mayúsculas y minúsculas (sensible a mayúsculas y minúsculas)
Un identificador NO puede:
* empezar por un número.
* empezar por un símbolo, ni tampoco que sea una palabra reservada.

Tabla tipo de dato
-------------------------------------------------------------
latino		|	lenguajes como C / C++ / Java / C# / etc.
-------------------------------------------------------------
logico		|	bool 
entero		|	int
decimal		|	float / double / decimal
caracter	|	char
cadena		|	string / String
-------------------------------------------------------------

Constantes:
---
Las constantes son valores inmutables, y por tanto no se pueden cambiar.
Cuando se declara una constante con la palabra clave [constante], también
se debe asignar el valor forzosamente.

constante decimal PI = 3.1416

Operadores:
---
A continuacion se listan los operadores:

------------------------------------------------------------
Categoría				Operadores
------------------------------------------------------------
Aritmético			          |	+ - * / % (Modulo)
Lógico			  	          | 	y o no
Concatenación	            |	+
Incremento, decremento		|	++ --
Relacional			          |	== != < > <= >=
Asignación			          |	= 
Acceso a miembro		      |	.
------------------------------------------------------------

Estructuras de control:
---
si (if): Evalua una condicion y si el resultado es [verdadero] ejecuta 
las instrucciones a continuacion.

si (condicion)
   "codigo"
fin

En caso de que el resultado de la condición sea [falso] se deberá de ejecutar
el código despues de la palabra reservada [otro]

si (condicion)
   "codigo"
otro 
   "codigo"
fin

Es posible el anidamiento de las sentencias [si] de la siguiente manera:
si (condicion)
   "codigo"
otro si (condicion) 
         "codigo"
     otro
	 "codigo"
     fin
fin

elegir (switch): Evalua una opción de multiples posibles casos. 

elegir (opcion)
    caso "1":
	 "codigo"
    caso "2":
         "codigo"
    otro:
         "codigo"
fin

desde (for): Hace que una instrucción o bloque de instrucciones se repitan 
desde un valor inicial hasta un final
---
desde 0 hasta 10
      imprimir(i)
fin
salida: 0 1 2 3 4 5 6 7 8 9 10

desde 10 hasta 0      
      imprimir(i)
fin
salida: 10 9 8 7 6 5 4 3 2 1 0

Se puede especificar el incremento del ciclo con la palabra clave [incremento]

i = 10
desde i hasta 50 incremento = 10
      imprimir(i)
fin
salida: 10 20 30 40 50

mientras (while): Hace que una instrucción o bloque de instrucciones se repitan
mientras la condicion sea [verdadero]

mientras (condicion)
      "codigo"
fin

mientras (verdadero)
      "codigo"
fin

hacer-mientras (do-while): Hace que una instrucción o bloque de instrucciones 
se repitan mientra la condicion sea [verdadero],
las intrucciones de codigo se ejecutan al menos una vez.

hacer
     "codigo"
mientras (condicion)

se puede condicionar salir del bucle o continuar con la siguiente permutación
con las palabrar clave [romper y continuar]

i = 0
desde i hasta 10
      si i == 5         
      	 romper
	 imprimir(i)
      fin
fin
salida: 0 1 2 3 4 5

i = 0
desde i hasta 10
      si i == 5
         continuar
         imprimir(i)
      fin
fin
salida: 0 1 2 3 4 6 7 8 9 10

Metodos
---
un método consiste generalmente de una serie de sentencias para llevar a cabo una acción,
un juego de parámetros de entrada que regularán dicha acción o, posiblemente, un valor de salida.
La estructura de un método es la siguiente:

NombreMetodo (tipo_dato variable, tipo_dato variable2)

fin

Se puede especificar un tipo de valor devuelto a continuacion de los parametros y
regresar el valor con la palabra clave [retorno]

NombreMetodo (tipo_dato variable, tipo_dato variable2) tipo_dato_retorno
    entero i;
    "codigo"
    retorno i
fin

Se puede sobrecargar un método siempre y cuando los parámetros varien en numero.
NombreMetodo (tipo_dato variable, tipo_dato variable2, tipo_dato variable3) tipo_dato_retorno
    entero i;
    "codigo"
    retorno i
fin

También se le pueden pasar valores por defecto a los parametros especificandoles un valor.
NombreMetodo (tipo_dato variable, tipo_dato variable2="defecto") tipo_dato_retorno
    entero i;
    "codigo"
    retorno i
fin


Clases
---
una clase (class) es una plantilla para la creación de objetos de datos según un modelo predefinido.
Las clases se utilizan para representar entidades o conceptos, como los sustantivos en el lenguaje.
Se definen con la palabra clave [clase]

clase Auto
    "codigo"
fin

las clases pueden contener constructor (inicialización de la clase), propiedades y métodos.

clase Auto
    "se define una propiedad con la palabra reservada propiedad"
    propiedad cadena Marca
    propiedad entero NoPuertas

    "se define un constructor con la palabra reservada constructor"
    constructor ()
    fin

    constructor (cadena marca, entero noPuertas)
        "se define el valor de la propiedad con la palabra clave [esta]"
        esta.Marca = marca
	      esta.NoPuertas
    fin

    "método ejemplo"
    privado Encender ()
    fin
fin

Ámbito: Se puede definir el ámbito a una clase, sus propiedades y funciones con las palabras
reservadas:

publico: 
Una variable/función pública puede ser accedida desde fuera de la clase. Es decir, 
puedo acceder desde la instancia de la clase y no sólo desde el código interno de la clase.

privado:
Al contrario que las públicas, las variables/funciones privadas sólo pueden ser accedidas 
desde dentro de la misma clase.

protegido:
Existe un tipo intermedio de ámbito, entre público y privado llamado "protegido".
Básicamente significa que, si una clase hereda de otra, tendrá acceso a las variables/funciones 
protegidas de la super-clase, de lo contrario, no podrá acceder a ellas.

Por default se definen publicas las variables/funciones.

Herencia: Se puede heredar de una clase con dos puntos (:) ClaseHijo : ClasePadre
---

clase Bochito: Auto
      constructor ()
          esta.NoPuertas = 2
      fin
fin

Palabras reservadas hasta el momento:
---
constante    logico    entero    decimal    caracter    cadena    constante    
si    verdadero    falso    fin    otro    elegir    caso    desde    hasta
incremento    mientras    hacer    romper    continuar    clase    propiedad
constructor    esta    publico    privado    protegido    lista diccionario